enum SubscriptionStatus {
	UNDEFINED # Subscription not created yet
	ACTIVE # Subscription is active
	STOPPED # Subscription is stopped
	CANCELED # Subscription got canceled by the user
	FINISHED # Subscription finished normally
}

type Subscription @entity {
	id: ID! # token + from + to + startBlock

	# References
	token: StreamableToken!
	from: User!
	to: User!
	fromUserTokenData: UserStreamableTokenData!
	toUserTokenData: UserStreamableTokenData!

	# Data
	status: SubscriptionStatus!

	rate: BigInt! # tokens per block
	maxAmount: BigInt! # tokens
	amountPaid: BigInt! # tokens

	startBlock: BigInt! # block number
	startTime: BigInt! # timestamp
	endBlock: BigInt # block number (optional)
	endTime: BigInt # timestamp (optional)
}


type User @entity {
	id: ID! # address

	# Token balances and statistics
	tokens: [UserStreamableTokenData!]! @derivedFrom(field: "user")

	# Incoming subscriptions
	incomingSubscriptions: [Subscription!]! @derivedFrom(field: "to")
		# Aggregated statistics (counting active subscriptions only)
		totalIncomingSubscriptions: Int! # length of incomingSubscriptions
		totalSubscribers: Int! # unique subscribers

	# Outgoing subscriptions
	outgoingSubscriptions: [Subscription!]! @derivedFrom(field: "from")
		# Aggregated statistics (counting active subscriptions only)
		totalOutgoingSubscriptions: Int! # length of outgoingSubscriptions
		totalSubscribedTo: Int! # unique users subscribed to

	# Historical snapshots
	history: [UserSnapshot!]! @derivedFrom(field: "currentUser")
}


type StreamableToken @entity {
	id: ID! # token address
	symbol: String!
	name: String!
	decimals: BigInt!
}


# Data for a given user on a given Streamable Token contract
type UserStreamableTokenData @entity {
	id: ID! # address + token.address

	# References
	user: User!
	token: StreamableToken!

	# Data
	blockAtLastUpdate: BigInt! # block
	balance: BigInt! # tokens
	availableAmount: BigInt!

	# Incoming subscriptions
	incomingSubscriptions: [Subscription!]! @derivedFrom(field: "toUserTokenData")
		# Aggregated statistics (all subscriptions ever)
		lifetimeReceivedAmount: BigInt!
		# Aggregated statistics (counting active subscriptions only)
		totalIncomingRate: BigInt! # tokens per block
		totalReceivedAmount: BigInt! # tokens received so far
		totalMaxIncomingAmount: BigInt! # tokens
		totalIncomingSubscriptions: Int! # length of incomingSubscriptions
		totalSubscribers: Int! # unique subscribers

	# Outgoing subscriptions
	outgoingSubscriptions: [Subscription!]! @derivedFrom(field: "fromUserTokenData")
		# Aggregated statistics (all subscriptions ever)
		lifetimePaidAmount: BigInt!
		# Aggregated statistics (counting active subscriptions only)
		totalOutgoingRate: BigInt! # tokens per block
		totalPaidAmount: BigInt! # tokens paid so far
		totalMaxOutgoingAmount: BigInt! # tokens
		totalOutgoingSubscriptions: Int! # length of outgoingSubscriptions
		totalSubscribedTo: Int! # unique users subscribed to

	# Historical snapshots
	history: [UserStreamableTokenDataSnapshot!]! @derivedFrom(field: "currentUserStreamableTokenData")
}


# Historical data - write once every block

# Active subscriptions only
type SubscriptionSnapshot @entity {
	id: ID! # from + to + token + startBlock + blockNumber

	# References
	token: StreamableToken!
	from: UserSnapshot!
	to: UserSnapshot!
	fromUserTokenData: UserStreamableTokenDataSnapshot!
	toUserTokenData: UserStreamableTokenDataSnapshot!

	# Data
	rate: BigInt! # tokens per block
	maxAmount: BigInt! # tokens
	amountPaid: BigInt! # tokens

	startBlock: BigInt! # block number
	startTime: BigInt! # timestamp
	endBlock: BigInt # block number (optional)
	endTime: BigInt # timestamp (optional)


	# Snapshot info
	blockNumber: BigInt! # block number
	timestamp: BigInt! # date

	# Snapshot back-references
	currentFrom: User!
	currentTo: User!
	currentFromUserTokenData: UserStreamableTokenData!
	currentToUserTokenData: UserStreamableTokenData!
	currentSubscription: Subscription!
}


type UserSnapshot @entity {
	id: ID! # address + blockNumber

	# Token balances and statistics
	tokens: [UserStreamableTokenDataSnapshot!]! @derivedFrom(field: "user")

	# Incoming subscriptions
	incomingSubscriptions: [SubscriptionSnapshot!]! @derivedFrom(field: "to")
		# Aggregated statistics (counting active subscriptions only)
		totalIncomingSubscriptions: Int! # length of incomingSubscriptions
		totalSubscribers: Int! # unique subscribers

	# Outgoing subscriptions
	outgoingSubscriptions: [SubscriptionSnapshot!]! @derivedFrom(field: "from")
		# Aggregated statistics (counting active subscriptions only)
		totalOutgoingSubscriptions: Int! # length of outgoingSubscriptions
		totalSubscribedTo: Int! # unique users subscribed to


	# Snapshot info
	blockNumber: BigInt! # block number
	timestamp: BigInt! # date

	# Snapshot back-references
	currentUser: User
}


type UserStreamableTokenDataSnapshot @entity {
	id: ID! # user.address + token + blockNumber

	# References
	user: UserSnapshot!
	token: StreamableToken!

	# Data
	balance: BigInt!
	availableAmount: BigInt!

	# Incoming subscriptions
	incomingSubscriptions: [SubscriptionSnapshot!]! @derivedFrom(field: "toUserTokenData")
		# Aggregated statistics (all subscriptions ever)
		lifetimeReceivedAmount: BigInt!
		# Aggregated statistics (counting active subscriptions only)
		totalIncomingRate: BigInt! # tokens per block
		totalReceivedAmount: BigInt! # tokens received so far
		totalMaxIncomingAmount: BigInt! # tokens
		totalIncomingSubscriptions: Int! # length of incomingSubscriptions
		totalSubscribers: Int! # unique subscribers

	# Outgoing subscriptions
	outgoingSubscriptions: [SubscriptionSnapshot!]! @derivedFrom(field: "fromUserTokenData")
		# Aggregated statistics (all subscriptions ever)
		lifetimePaidAmount: BigInt!
		# Aggregated statistics (counting active subscriptions only)
		totalOutgoingRate: BigInt! # tokens per block
		totalPaidAmount: BigInt! # tokens paid so far
		totalMaxOutgoingAmount: BigInt! # tokens
		totalOutgoingSubscriptions: Int! # length of outgoingSubscriptions
		totalSubscribedTo: Int! # unique users subscribed to


	# Snapshot info
	blockNumber: BigInt! # block number
	timestamp: BigInt! # date

	# Snapshot back-references
	currentUser: User!
	currentUserStreamableTokenData: UserStreamableTokenData!
}

type DataContainer @entity {
	id: ID! # 1
	subscriptions: [Subscription!]!
}
