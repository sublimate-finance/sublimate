/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GreetingsRegistryInterface extends ethers.utils.Interface {
  functions: {
    "fails(string)": FunctionFragment;
    "postUpgrade(uint256)": FunctionFragment;
    "setMessage(string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "fails", values: [string]): string;
  encodeFunctionData(
    functionFragment: "postUpgrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setMessage", values: [string]): string;

  decodeFunctionResult(functionFragment: "fails", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMessage", data: BytesLike): Result;

  events: {
    "MessageChanged(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageChanged"): EventFragment;
}

export class GreetingsRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GreetingsRegistryInterface;

  functions: {
    fails(message: string, overrides?: Overrides): Promise<ContractTransaction>;

    "fails(string)"(
      message: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    postUpgrade(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "postUpgrade(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMessage(
      message: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMessage(string)"(
      message: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  fails(message: string, overrides?: Overrides): Promise<ContractTransaction>;

  "fails(string)"(
    message: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  postUpgrade(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "postUpgrade(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMessage(
    message: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMessage(string)"(
    message: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    fails(message: string, overrides?: CallOverrides): Promise<void>;

    "fails(string)"(message: string, overrides?: CallOverrides): Promise<void>;

    postUpgrade(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "postUpgrade(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMessage(message: string, overrides?: CallOverrides): Promise<void>;

    "setMessage(string)"(
      message: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    MessageChanged(user: string | null, message: null): EventFilter;
  };

  estimateGas: {
    fails(message: string, overrides?: Overrides): Promise<BigNumber>;

    "fails(string)"(message: string, overrides?: Overrides): Promise<BigNumber>;

    postUpgrade(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "postUpgrade(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMessage(message: string, overrides?: Overrides): Promise<BigNumber>;

    "setMessage(string)"(
      message: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fails(
      message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "fails(string)"(
      message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    postUpgrade(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "postUpgrade(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMessage(
      message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMessage(string)"(
      message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
