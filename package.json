{
  "name": "jolly-roger",
  "version": "0.0.1",
  "description": "Jolly Roger",
  "license": "UNLICENSED",
  "private": true,
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^3.9.1",
    "@typescript-eslint/parser": "^3.9.1",
    "change-name": "^0.2.6",
    "cross-env": "^7.0.2",
    "dotenv-cli": "^3.1.0",
    "eslint": "^7.7.0",
    "eslint-config-prettier": "^6.11.0",
    "eslint-plugin-svelte3": "^2.7.3",
    "npm-run-all": "^4.1.5",
    "prettier": "^2.1.2",
    "prettier-plugin-solidity": "^1.0.0-alpha.59",
    "prettier-plugin-svelte": "^1.4.1",
    "rimraf": "^3.0.2",
    "solhint": "^3.3.1",
    "solhint-plugin-prettier": "^0.0.5",
    "svelte": "^3.25.1",
    "typescript": "3.9.7",
    "wait-on": "^5.1.0",
    "wighawag_newsh": "0.0.6"
  },
  "pnpm": {
    "overrides": {
      "@ethersproject/sha2": "^5.0.6"
    }
  },
  "scripts": {
    "preinstall": "npx only-allow pnpm",
    "setup": "npx change-name jolly-roger && pnpm install",
    "set-name": "npx change-name jolly-roger",
    "prepare": "node ./.setup.js",

    "lint": "eslint \"**/*.{js,ts}\" && solhint contracts/src/**/*.sol",
    "lint:fix": "eslint --fix \"**/*.{js,ts}\" && solhint --fix contracts/src/**/*.sol",
    "format": "npm run --prefix _npm prettier -- --write \"../**/*.{ts,js,svelte,sol}\"",

    "test": "run-s contracts:test",

    "// externals : Setup external services locally (ethereum node, thegraph)": "",
    "stop": "run-s externals:down",
    "externals:down": "docker-compose down -v",
    "docker-compose": "dotenv -e .env -e contracts/.env -- docker-compose up",
    "externals:up": "run-p docker-compose contracts:fundingFromGethCoinbase",
    "shell:externals:up": "newsh \"npm run externals:up\"",

    "// common lib: ensure it is compiled": "",
    "common:dev": "npm --prefix common-lib run dev",
    "shell:common": "newsh \"npm run common:dev\"",
    "common:build": "npm --prefix common-lib run build",

    "// contracts : deploy smart contracts on local ethereum node": "",
    "contracts:test": "npm --prefix contracts test",
    "contracts:clean": "rimraf contracts/deployments/localhost && rimraf web/src/contracts.json",
    "contracts": "dotenv -e .env -e contracts/.env -- npm --prefix contracts run local:dev -- --export ../web/src/contracts.json",
    "shell:contracts": "newsh \"npm run contracts\"",
    "contracts:deploy": "dotenv -e .env -e contracts/.env -- npm --prefix contracts run local:deploy -- --export ../web/src/contracts.json",
    "contracts:export": "dotenv -e .env -e contracts/.env -- npm --prefix contracts run local:export -- --export ../web/src/contracts.json",
    "contracts:fundingFromGethCoinbase": "dotenv -e .env -e contracts/.env -- npm --prefix contracts run local:run scripts/fundingFromGethCoinbase.ts",
    "seed": "wait-on web/src/contracts.json && dotenv -e .env -e contracts/.env -- npm --prefix contracts run local:seed",
    "seed:build": "run-s common:build seed",

    "// subgraphs : generate and deploy local subgraph": "",
    "subgraph": "wait-on web/src/contracts.json && dotenv -- npm --prefix subgraph run dev ../contracts/deployments/localhost",
    "shell:subgraph": "newsh \"npm run subgraph\"",
    "subgraph:setup": "dotenv -- npm --prefix subgraph run local:setup",
    "subgraph:deploy": "wait-on web/src/contracts.json && dotenv -- npm --prefix subgraph run local:deploy ../contracts/deployments/localhost",

    "// web : build and serve the web app": "",
    "web": "dotenv -- npm --prefix web run dev",
    "shell:web": "newsh \"npm run web\"",
    "web:build": "run-s web:generate contracts:export web:rebuild",
    "web:rebuild": "dotenv -- npm --prefix web run build",
    "web:serve": "dotenv -- npm --prefix web run serve --",
    "web:build:serve": "run-s web:build web:serve",
    "web:generate": "dotenv -- npm --prefix web run generate",

    "// STAGING : deploy on staging": "",
    "staging:web:dev": "dotenv -e .env.staging -e .env -- npm --prefix web run dev",
    "staging:web:build": "run-s web:generate staging:contracts:export common:build staging:web:rebuild",
    "staging:web:build:serve": "run-s staging:web:build web:serve",
    "staging:web:rebuild": "dotenv -e .env.staging -e .env -- npm --prefix web run build",
    "staging:web:deploy": "dotenv -e .env.staging -e .env -- npm --prefix web run deploy",
    "staging:seed": "dotenv -e .env.staging -e .env -- npm --prefix contracts run staging:seed",
    "staging:contracts:export": "dotenv -e .env.staging -e .env -- npm --prefix contracts run staging:export -- --export ../web/src/contracts.json",
    "staging:contracts": "dotenv -e .env.staging -e .env -- npm --prefix contracts run staging:deploy -- --export ../web/src/contracts.json",
    "staging:subgraph": "dotenv -e .env.staging -e .env -- npm --prefix subgraph run staging:deploy ../contracts/deployments/staging",
    "staging:web": "run-s staging:web:build staging:web:deploy",
    "staging": "run-s staging:contracts staging:subgraph web:generate common:build staging:web:rebuild staging:web:deploy",
    "staging:reset": "rimraf contracts/deployments/staging && run-s staging:contracts staging:subgraph web:generate common:build staging:web:rebuild staging:web:deploy",

    "// PRODUCTION : build on mainnet": "",
    "production:web:build": "run-s web:generate production:contracts:export common:build production:web:rebuild",
    "production:web:build:serve": "run-s production:web:build web:serve",
    "production:web:rebuild": "dotenv -e .env.production -e .env -- npm --prefix web run build",
    "production:web:deploy": "dotenv -e .env.production -e .env -- npm --prefix web run deploy",
    "production:contracts:export": "dotenv -e .env.production -e .env -- npm --prefix contracts run mainnet:export -- --export ../web/src/contracts.json",
    "production:contracts": "dotenv -e .env.production -e .env -- npm --prefix contracts run mainnet:deploy -- --export ../web/src/contracts.json",
    "production:subgraph": "dotenv -e .env.production -e .env -- npm --prefix subgraph run mainnet:deploy ../contracts/deployments/mainnet",
    "production:web": "run-s production:web:build production:web:deploy",
    "production": "run-s production:contracts production:subgraph web:generate common:build production:web:rebuild production:web:deploy",

    "// START : local development setup": "This setup external service, setup subgraph and deploy it on the local graph-node, deploy the contracts and seed it",
    "externals": "npm-run-all -l externals:down --parallel externals:up",
    "start": "npm-run-all -l externals:down contracts:clean --parallel common:dev web externals:up subgraph:setup contracts subgraph seed:build",
    "dev": "npm-run-all -l contracts:clean --parallel common:dev web subgraph:setup contracts subgraph seed:build",
    "shell:start": "npm-run-all -l externals:down --parallel shell:common shell:web shell:externals:up --sequential common:build subgraph:setup contracts:clean shell:contracts shell:subgraph seed",
    "shell:dev": "npm-run-all -l --parallel shell:common shell:web --sequential common:build subgraph:setup contracts:clean shell:contracts shell:subgraph seed"
  }
}
